a {
  color: white;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

/* CSS for React Query Builder */
.svg-font-color svg > path {
  fill: var(--ifm-font-color-base);
}

.queryBuilder {
  display: flex;
  padding: var(--chakra-space-2);
  border-radius: var(--chakra-radii-md);
  border: var(--chakra-borders-1px);
  border-color: var(--chakra-colors-gray-200);
}

.queryBuilder {
  select,
  input {
    height: var(--input-height);
    --input-font-size: var(--chakra-fontSizes-sm);
    --input-border-radius: var(--chakra-radii-sm);
    --input-height: var(--chakra-sizes-8);
    background: var(--chakra-colors-white);
  }
  button {
    display: inline-flex;
    font-size: var(--chakra-fontSizes-sm);
    height: var(--chakra-sizes-8);
    align-items: center;
    justify-content: center;
  }
}

.ruleGroup {
  display: flex;
  width: 100%;
  gap: var(--chakra-space-2);
  flex-direction: column;
}

.ruleGroup-header {
  display: flex;
  align-items: center;
  width: 100%;
  gap: var(--chakra-space-2);
  flex-wrap: wrap;
  border: 1px solid var(--chakra-colors-gray-200);
  border-radius: var(--chakra-radii-md);
  padding: var(--chakra-space-2);
  background: var(--chakra-colors-gray-50);

  .ruleGroup-notToggle {
    gap: var(--chakra-space-2);
  }

  .ruleGroup-combinators {
    border-radius: var(--chakra-radii-md);
    font-weight: bold;
  }

  .ruleGroup-addRule,
  .ruleGroup-addGroup {
    padding: var(--chakra-space-2);
    background: var(--chakra-colors-blue-500);
    color: var(--chakra-colors-white);
    svg {
      color: var(--chakra-colors-white);
    }
  }
  .ruleGroup-addRule:hover,
  .ruleGroup-addGroup:hover {
    background: var(--chakra-colors-blue-600);
  }

  .ruleGroup-remove {
    padding: var(--chakra-space-2);
    background: var(--chakra-colors-red-500);
    svg {
      color: var(--chakra-colors-white);
    }
  }
  .ruleGroup-remove:hover {
    background: var(--chakra-colors-red-600);
  }

  .ruleGroup-cloneGroup {
    padding: var(--chakra-space-2);
  }

  .chakra-select__wrapper {
    width: fit-content;
  }
}

.ruleGroup-body {
  display: flex;
  flex-direction: column;
  width: 100%;
  gap: var(--chakra-space-2);

  .rule-remove {
    background: var(--chakra-colors-red-500);
    svg {
      color: var(--chakra-colors-white);
    }
  }
  .rule-remove:hover {
    background: var(--chakra-colors-red-600);
  }

  .rule {
    display: flex;
    gap: var(--chakra-space-2);
    margin-left: var(--chakra-space-4);
    flex-wrap: wrap;

    .rule-remove {
      background: var(--chakra-colors-red-500);
      svg {
        color: var(--chakra-colors-white);
      }
    }
    .rule-remove:hover {
      background: var(--chakra-colors-red-600);
    }

    .rule-fields,
    .rule-operators {
      border-radius: var(--chakra-radii-md);
    }

    .rule-cloneRule,
    .rule-remove {
      padding: 0;
    }

    .chakra-select__wrapper {
      width: fit-content;
    }
  }
}

.validateQuery .queryBuilder .ruleGroup.queryBuilder-invalid {
  background-color: rgba(102, 51, 153, 0.4);
}
.validateQuery
  .queryBuilder
  .ruleGroup.queryBuilder-invalid
  .ruleGroup-addRule {
  font-weight: bold !important;
}
.validateQuery
  .queryBuilder
  .ruleGroup.queryBuilder-invalid
  > .ruleGroup-header::after {
  content: "Empty groups are considered invalid. Avoid them by using addRuleToNewGroups.";
  color: white;
}
.validateQuery .queryBuilder .rule.queryBuilder-invalid .rule-value {
  background-color: rgba(102, 51, 153, 0.4);
}
.validateQuery
  .queryBuilder
  .rule.queryBuilder-invalid
  .rule-value::placeholder {
  color: #47246b;
}

html[data-theme="dark"]
  .validateQuery
  .queryBuilder
  .rule.queryBuilder-invalid
  .rule-value::placeholder {
  color: #945ec9;
}

.justifiedLayout
  .queryBuilder
  .ruleGroup-addGroup
  + button.ruleGroup-cloneGroup,
.justifiedLayout .queryBuilder .ruleGroup-addGroup + button.ruleGroup-lock,
.justifiedLayout .queryBuilder .ruleGroup-addGroup + button.ruleGroup-remove {
  margin-left: auto !important;
}
.justifiedLayout .queryBuilder .rule-operators + button.rule-cloneRule,
.justifiedLayout .queryBuilder .rule-operators + button.rule-lock,
.justifiedLayout .queryBuilder .rule-operators + button.rule-remove,
.justifiedLayout .queryBuilder .rule-value + button.rule-cloneRule,
.justifiedLayout .queryBuilder .rule-value + button.rule-lock,
.justifiedLayout .queryBuilder .rule-value + button.rule-remove,
.justifiedLayout .queryBuilder .control + button.rule-cloneRule,
.justifiedLayout .queryBuilder .control + button.rule-lock,
.justifiedLayout .queryBuilder .control + button.rule-remove,
.justifiedLayout .queryBuilder .chakra-select__wrapper + button.rule-cloneRule,
.justifiedLayout .queryBuilder .chakra-select__wrapper + button.rule-lock,
.justifiedLayout .queryBuilder .chakra-select__wrapper + button.rule-remove {
  margin-left: auto !important;
}
